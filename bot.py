import asyncio
import logging
import os
from datetime import datetime

from aiogram import Bot, Dispatcher, types, F, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters.command import Command
from aiogram.types import Message
from aiogram.utils.formatting import Text
from aiogram.utils.formatting import (
    Bold, as_list, as_marked_section, as_key_value, HashTag
)

from config_reader import config


# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(
    token=config.bot_token.get_secret_value(),
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default=DefaultBotProperties(
        parse_mode=ParseMode.HTML
    )
)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(F.text, Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å <u>HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π</u>", parse_mode=ParseMode.HTML)


@dp.message(Command("answer"))
async def cmd_answer(message: types.Message):
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ <u>HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π</u>", parse_mode=None)


@dp.message(Command("reply"))
async def cmd_reply(message: types.Message):
    await message.reply('–≠—Ç–æ –æ—Ç–≤–µ—Ç —Å "–æ—Ç–≤–µ—Ç–æ–º"')


# @dp.message(Command("hello"))
# async def cmd_hello(message: types.Message):
#     await message.reply(
#         f"Hello, {html.bold(html.quote(message.form_user.full_name))}",
#         parse_mode=ParseMode.HTML
#     )


@dp.message(Command('hello'))
async def cmd_hello(message: types.message):
    """ –í—ã–¥–µ–ª—è–µ–º —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ """
    content = Text(
        "Hello, ",
        # –í—ã–¥–µ–ª—è–µ–º —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
        Bold(message.from_user.full_name)
    )
    await message.answer(
        **content.as_kwargs()
    )


@dp.message(Command("advanced_example"))
async def cmd_advanced_example(message: types.Message):
    content = as_list(
        as_marked_section(
            Bold("Success:"),
            "Test 1",
            "Test 3",
            "Test 4",
            marker="‚úÖ ",
        ),
        as_marked_section(
            Bold("Failed:"),
            "Test 2",
            marker="‚ùå ",
        ),
        as_marked_section(
            Bold("Summary:"),
            as_key_value("Total", 4),
            as_key_value("Success", 3),
            as_key_value("Failed", 1),
            marker="  ",
        ),
        HashTag("#test"),
        sep="\n\n",
    )
    await message.answer(**content.as_kwargs())


# @dp.message(F.text)
# async def echo_with_time(message: types.Message):
#     """ message.text –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ï—â–µ –µ—Å—Ç—å message.md_text """
#     # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ü–ö
#     time_now = datetime.now().strftime('%H:%M')
#     # –°–æ–∑–¥–∞—ë–º –ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç
#     added_text = html.underline(f"–°–æ–∑–¥–∞–Ω–æ –≤ {time_now}")
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
#     await message.answer(f"{message.html_text}\n\n{added_text}", parse_mode="HTML")


@dp.message(F.text)
async def extract_data(message: Message):
    """ –î–æ—Å—Ç–∞–µ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–µ
    '
    –ø—Ä–∏–≤–µ—Ç www.yandex.ru
    –∑–∞–≤—Ç—Ä–∞ parl@mail.ru
    –ø–æ—Ç–æ–º—É —á—Ç–æ SuperS3cretPa$$w0rd
    '
    """
    data = {
        "url": "<N/A>",
        "email": "<N/A>",
        "code": "<N/A>"
    }
    entities = message.entities or []
    for item in entities:
        if item.type in data.keys():
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
            # data[item.type] = message.text[item.offset : item.offset+item.length]
            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ
            data[item.type] = item.extract_from(message.text)
    await message.reply(
        "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª:\n"
        f"URL: {html.quote(data['url'])}\n"
        f"E-mail: {html.quote(data['email'])}\n"
        f"–ü–∞—Ä–æ–ª—å: {html.quote(data['code'])}"
    )



@dp.message(Command("dice"))
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
